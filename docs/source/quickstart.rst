.. _quickstart:

Quick start guide
-----------------

First time set-up
`````````````````

.. note::

    This section assumes that **tomato** has been successfully :ref:`installed<installation>`.

To prepare **tomato** for its first execution, a *settings file* containing the basic
configuration of the driver needs to be placed in **tomato's** *appdir* folder. By
default, the *appdir* path is:

- ``$env:localappdata\dgbowl\tomato\<version>`` on Windows,
- ``$HOME/.config/tomato/<version>`` on Linux.

The easiest way to do create this file is using the provided ``tomato init`` command:

.. code-block::
   :linenos:
   :emphasize-lines: 3
    
    kraus@dorje:/home/kraus/$ tomato init
    data: null
    msg: wrote default settings into /home/kraus/.config/tomato/1.0a1/settings.toml
    success: true

Where *appdir* is ``/home/kraus/.config/tomato/1.0a1/``. The *appdir* can be specified
using the ``--appdir`` argument to **tomato**.

.. _setfile:

Settings file
`````````````

The *settings file* ``settings.toml`` has to be located in the *appdir*. The default 
file generated by ``tomato init`` above looks similar to the below file:

.. code-block:: toml
   :linenos:

    [queue]
    type = 'sqlite3'
    path = '/home/kraus/.local/share/tomato/1.0a1/database.db'
    storage = '/home/kraus/.local/share/tomato/1.0a1/Jobs'

    [devices]
    path = '/home/kraus/.config/tomato/1.0a1/devices.yml'

    [drivers]

In addition to the *appdir*, a second path, *datadir* is used to specify the location of
the data created by **tomato**. The default *datadir* is:

- ``$env:localappdata\dgbowl\tomato\<version>`` on Windows,
- ``$HOME/.local/share/tomato/<version>`` on Linux.

In the default *settings file* shown above, the ``[queue]`` section contains ``path``,
specifying the location of the ``database.db`` file containing the *queue* table, as 
well as the database ``type`` (only ``sqlite3`` is supported). The ``storage`` entry
points to the path where the raw data generated by the submitted *jobs* will be stored.

The ``[devices]`` section within the *settings file* file points to a ``yaml``-formatted 
:ref:`devfile`, defining the hardware configuration of the devices managed by **tomato**.

Additional, *driver*-specific settings (such as the ``dllpath`` required by the 
:mod:`~tomato.drivers.biologic` driver) may be provided in the ``[drivers]`` section.

.. _devfile:

Devices file
````````````
This ``yaml``-formatted file contains information about each *device*, corresponding to 
an individual piece of hardware managed by **tomato**, as well as information about the 
organisation of such *devices* into addressable chunks, called *pipelines*. The 
*pipelines* can be thought of as digital twins of experimental set-ups, and should 
contain all *devices* required to carry out a *payload* (see :ref:`payfile`).

**devices** section
*******************

.. code-block:: yaml
   :linenos:

    devices:
      - name: MPG2-8
        address: "192.109.209.8"
        channels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
        driver: "biologic"
        pollrate: 60
        capabilities: 
          - open_circuit_voltage
          - constant_current
          - constant_voltage
          - sweep_current
          - sweep_voltage
          - loop

In the example ``devices`` section above, we define a single BioLogic MPG2 potentiostat.
Each entry in this section has to define the ``name`` of the instrument, the ``address`` 
and ``channels`` available and used for connecting to the instrument, the ``driver`` with 
which **tomato** will manage this *device*, the ``pollrate`` specifying the polling frequency 
with which the **tomato** daemon queries the worker job for data, and finally a list of the 
``capabilities`` this *device* supports.

.. note::

    The ``pollrate`` here is an internal setting for **tomato** and defaults to 10 s. It
    is the frequency with which the *job* daemon supervising the *device* asks the *driver*
    for new data, **not** the frequency with which the *driver* asks the hardware for data!

**pipelines** section
*********************

.. code-block:: yaml
   :linenos:
   :emphasize-lines: 2-6

    pipelines:
      - name: MPG2-7-10
        devices:
          - tag: MPG2
            name: MPG2-7
            channel: 10
      - name: MPG2-8-*
        devices:
          - tag: MPG2
            name: MPG2-8
            channel: each

In the example ``pipelines`` section above, we show two ways of defining *pipelines* in
**tomato**. In the first entry on ``lines 2-6``, we define a *pipeline* by its ``name``, 
and assign a list of *devices* into it, identified within the *pipeline* by their 
``tag``, and matched against the ``devices`` section using the ``name`` and ``channel``.

Alternatively, for multi-channel *devices*, such as the ``MPG2-8`` defined in the example
above, a shorthand for defining a *pipeline* for each ``channel`` is shown in the second
entry. The pipeline ``name`` will be generated by replacing the ``*`` with each ``channel``.

Multiple *devices* can be combined into a single *pipeline* using the above syntax.


.. _payfile:

Payload file
````````````
The *payload* file contains all information required to enter a *job* into the *queue*.
The overall schema of the *payload* is defined in the :mod:`dgbowl_schemas.tomato`
module, and is parsed using :func:`dgbowl_schemas.tomato.to_payload`:

.. autopydantic_model:: dgbowl_schemas.tomato.payload_0_2.Payload